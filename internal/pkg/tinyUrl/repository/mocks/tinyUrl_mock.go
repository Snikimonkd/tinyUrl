// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/tinyUrl/repository/tinyUrl.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTinyUrlRepositoryInterface is a mock of TinyUrlRepositoryInterface interface.
type MockTinyUrlRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTinyUrlRepositoryInterfaceMockRecorder
}

// MockTinyUrlRepositoryInterfaceMockRecorder is the mock recorder for MockTinyUrlRepositoryInterface.
type MockTinyUrlRepositoryInterfaceMockRecorder struct {
	mock *MockTinyUrlRepositoryInterface
}

// NewMockTinyUrlRepositoryInterface creates a new mock instance.
func NewMockTinyUrlRepositoryInterface(ctrl *gomock.Controller) *MockTinyUrlRepositoryInterface {
	mock := &MockTinyUrlRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockTinyUrlRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTinyUrlRepositoryInterface) EXPECT() *MockTinyUrlRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CheckIfFullUrlExist mocks base method.
func (m *MockTinyUrlRepositoryInterface) CheckIfFullUrlExist(fullUrl string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfFullUrlExist", fullUrl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfFullUrlExist indicates an expected call of CheckIfFullUrlExist.
func (mr *MockTinyUrlRepositoryInterfaceMockRecorder) CheckIfFullUrlExist(fullUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfFullUrlExist", reflect.TypeOf((*MockTinyUrlRepositoryInterface)(nil).CheckIfFullUrlExist), fullUrl)
}

// CheckIfTinyUrlExist mocks base method.
func (m *MockTinyUrlRepositoryInterface) CheckIfTinyUrlExist(tinyUrl string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfTinyUrlExist", tinyUrl)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfTinyUrlExist indicates an expected call of CheckIfTinyUrlExist.
func (mr *MockTinyUrlRepositoryInterfaceMockRecorder) CheckIfTinyUrlExist(tinyUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfTinyUrlExist", reflect.TypeOf((*MockTinyUrlRepositoryInterface)(nil).CheckIfTinyUrlExist), tinyUrl)
}

// Create mocks base method.
func (m *MockTinyUrlRepositoryInterface) Create(tinyUrl, fullUrl string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", tinyUrl, fullUrl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTinyUrlRepositoryInterfaceMockRecorder) Create(tinyUrl, fullUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTinyUrlRepositoryInterface)(nil).Create), tinyUrl, fullUrl)
}

// Get mocks base method.
func (m *MockTinyUrlRepositoryInterface) Get(tinyUrl string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", tinyUrl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTinyUrlRepositoryInterfaceMockRecorder) Get(tinyUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTinyUrlRepositoryInterface)(nil).Get), tinyUrl)
}
