// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package server_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TinyUrlServerClient is the client API for TinyUrlServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TinyUrlServerClient interface {
	// создает укороченную ссылку
	Create(ctx context.Context, in *FullUrl, opts ...grpc.CallOption) (*TinyUrl, error)
	// по укороченной ссылке находит полную ссылку
	Get(ctx context.Context, in *TinyUrl, opts ...grpc.CallOption) (*FullUrl, error)
}

type tinyUrlServerClient struct {
	cc grpc.ClientConnInterface
}

func NewTinyUrlServerClient(cc grpc.ClientConnInterface) TinyUrlServerClient {
	return &tinyUrlServerClient{cc}
}

func (c *tinyUrlServerClient) Create(ctx context.Context, in *FullUrl, opts ...grpc.CallOption) (*TinyUrl, error) {
	out := new(TinyUrl)
	err := c.cc.Invoke(ctx, "/TinyUrlServer/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tinyUrlServerClient) Get(ctx context.Context, in *TinyUrl, opts ...grpc.CallOption) (*FullUrl, error) {
	out := new(FullUrl)
	err := c.cc.Invoke(ctx, "/TinyUrlServer/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TinyUrlServerServer is the server API for TinyUrlServer service.
// All implementations must embed UnimplementedTinyUrlServerServer
// for forward compatibility
type TinyUrlServerServer interface {
	// создает укороченную ссылку
	Create(context.Context, *FullUrl) (*TinyUrl, error)
	// по укороченной ссылке находит полную ссылку
	Get(context.Context, *TinyUrl) (*FullUrl, error)
	mustEmbedUnimplementedTinyUrlServerServer()
}

// UnimplementedTinyUrlServerServer must be embedded to have forward compatible implementations.
type UnimplementedTinyUrlServerServer struct {
}

func (UnimplementedTinyUrlServerServer) Create(context.Context, *FullUrl) (*TinyUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTinyUrlServerServer) Get(context.Context, *TinyUrl) (*FullUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTinyUrlServerServer) mustEmbedUnimplementedTinyUrlServerServer() {}

// UnsafeTinyUrlServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TinyUrlServerServer will
// result in compilation errors.
type UnsafeTinyUrlServerServer interface {
	mustEmbedUnimplementedTinyUrlServerServer()
}

func RegisterTinyUrlServerServer(s grpc.ServiceRegistrar, srv TinyUrlServerServer) {
	s.RegisterService(&TinyUrlServer_ServiceDesc, srv)
}

func _TinyUrlServer_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FullUrl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinyUrlServerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TinyUrlServer/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinyUrlServerServer).Create(ctx, req.(*FullUrl))
	}
	return interceptor(ctx, in, info, handler)
}

func _TinyUrlServer_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TinyUrl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinyUrlServerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TinyUrlServer/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinyUrlServerServer).Get(ctx, req.(*TinyUrl))
	}
	return interceptor(ctx, in, info, handler)
}

// TinyUrlServer_ServiceDesc is the grpc.ServiceDesc for TinyUrlServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TinyUrlServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TinyUrlServer",
	HandlerType: (*TinyUrlServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TinyUrlServer_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TinyUrlServer_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
